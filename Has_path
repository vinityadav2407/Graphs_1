/*Problem statement
Given an undirected graph G(V, E) and two vertices v1 and v2 (as integers), check if there exists any path between them or not. Print true if the path exists and false otherwise.

Note:

1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
0 <= V <= 1000
0 <= E <= 1000
0 <= a <= V - 1
0 <= b <= V - 1
0 <= v1 <= V - 1
0 <= v2 <= V - 1
Time Limit: 1 second
Sample Input 1 :
4 4
0 1
0 3
1 2
2 3
1 3
Sample Output 1 :
true
Sample Input 2 :
6 3
5 3
0 1
3 4
0 3
Sample Output 2 :
false
*/
import java.util.LinkedList;
import java.util.Queue;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Scanner;
public class Solution {

	public static void main(String[] args) throws NumberFormatException, IOException {
   Scanner s=new Scanner(System.in);
   int n=s.nextInt();
   int e=s.nextInt();
   int edges[][]=new int[n][n];

   for(int i=0;i<e;i++){
       int fv=s.nextInt();
       int sv =s.nextInt();
       edges[fv][sv]=1;
       edges[sv][fv]=1;
   }
   int v1=s.nextInt();
   int v2=s.nextInt();
   haspath(edges,v1,v2);

	}
    private static void haspath(int [][]edges,int v1,int v2){
        boolean visited[] = new boolean[edges.length];

        Queue<Integer>q=new LinkedList<>();
        q.add(v1);
        visited[v1]=true;
        while(!q.isEmpty()){
            int front=q.remove();
            if(front==v2){
                System.out.println("true");
                return;
            }
            for(int i=0;i<edges.length;i++){
                if(edges[front][i]==1 && !visited[i]){
                    q.add(i);
                    visited[i]=true;
                }
            }
        }
        System.out.println("false");
    }

}
